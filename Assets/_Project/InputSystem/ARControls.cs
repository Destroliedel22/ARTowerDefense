//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/_Project/InputSystem/ARControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ARControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ARControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ARControls"",
    ""maps"": [
        {
            ""name"": ""Controls"",
            ""id"": ""43da9a29-8309-4a10-bec1-41d3f98601df"",
            ""actions"": [
                {
                    ""name"": ""MoveObjects"",
                    ""type"": ""Button"",
                    ""id"": ""9e829e1c-7399-453f-a8b3-0ee03c94e922"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fab05c14-d439-433d-930e-a320164a0985"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse&keyboard"",
                    ""action"": ""MoveObjects"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4ad506c-1d05-4cdf-a741-9cfc252f4939"",
                    ""path"": ""*/{PinchTouched}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Quest3"",
                    ""action"": ""MoveObjects"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Quest3"",
            ""bindingGroup"": ""Quest3"",
            ""devices"": [
                {
                    ""devicePath"": ""<HandInteractionPoses>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mouse&keyboard"",
            ""bindingGroup"": ""Mouse&keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Controls
        m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
        m_Controls_MoveObjects = m_Controls.FindAction("MoveObjects", throwIfNotFound: true);
    }

    ~@ARControls()
    {
        UnityEngine.Debug.Assert(!m_Controls.enabled, "This will cause a leak and performance issues, ARControls.Controls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controls
    private readonly InputActionMap m_Controls;
    private List<IControlsActions> m_ControlsActionsCallbackInterfaces = new List<IControlsActions>();
    private readonly InputAction m_Controls_MoveObjects;
    public struct ControlsActions
    {
        private @ARControls m_Wrapper;
        public ControlsActions(@ARControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveObjects => m_Wrapper.m_Controls_MoveObjects;
        public InputActionMap Get() { return m_Wrapper.m_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void AddCallbacks(IControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Add(instance);
            @MoveObjects.started += instance.OnMoveObjects;
            @MoveObjects.performed += instance.OnMoveObjects;
            @MoveObjects.canceled += instance.OnMoveObjects;
        }

        private void UnregisterCallbacks(IControlsActions instance)
        {
            @MoveObjects.started -= instance.OnMoveObjects;
            @MoveObjects.performed -= instance.OnMoveObjects;
            @MoveObjects.canceled -= instance.OnMoveObjects;
        }

        public void RemoveCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlsActions @Controls => new ControlsActions(this);
    private int m_Quest3SchemeIndex = -1;
    public InputControlScheme Quest3Scheme
    {
        get
        {
            if (m_Quest3SchemeIndex == -1) m_Quest3SchemeIndex = asset.FindControlSchemeIndex("Quest3");
            return asset.controlSchemes[m_Quest3SchemeIndex];
        }
    }
    private int m_MousekeyboardSchemeIndex = -1;
    public InputControlScheme MousekeyboardScheme
    {
        get
        {
            if (m_MousekeyboardSchemeIndex == -1) m_MousekeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse&keyboard");
            return asset.controlSchemes[m_MousekeyboardSchemeIndex];
        }
    }
    public interface IControlsActions
    {
        void OnMoveObjects(InputAction.CallbackContext context);
    }
}
